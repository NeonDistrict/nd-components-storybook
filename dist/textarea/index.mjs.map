{
  "version": 3,
  "sources": ["../../src/components/textarea/index.tsx", "../../src/components/textarea/styles.ts"],
  "sourcesContent": ["import React from 'react';\n\nimport type { TextareaAutosizeProps } from 'react-textarea-autosize';\n\nimport { CSS } from '../../system';\n\nimport { Wrapper, Label, TextAreaInput, Message, Error } from './styles';\n\nexport type TextareaProps = {\n  /**\n   * Label for the textarea\n   */\n  label?: string;\n  /**\n   * Hint of the textarea\n   */\n  hint?: string | string[];\n  /**\n   * Error message\n   */\n  error?: string | string[];\n  /**\n   * CSS properties\n   */\n  css?: CSS;\n} & TextareaAutosizeProps;\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ label, hint, name, error, minRows = 3, css }, ref) => {\n    return (\n      <Wrapper>\n        {label && <Label htmlFor={`textarea-${name}`}>{label}</Label>}\n\n        <TextAreaInput\n          ref={ref}\n          id={`textarea-${name}`}\n          minRows={minRows}\n          css={css}\n        />\n\n        <Message>{hint}</Message>\n\n        <Error>{error}</Error>\n      </Wrapper>\n    );\n  },\n);\n\nTextarea.displayName = 'Textarea';\n", "import { styled } from '../../system';\n\nimport ResizeTextarea from 'react-textarea-autosize';\n\nimport * as LabelBase from '@radix-ui/react-label';\n\nexport const Wrapper = styled('div', {\n  color: '$white',\n});\n\nexport const Label = styled(LabelBase.Root, {\n  d: 'block',\n  mb: '$1',\n  textTransform: 'uppercase',\n  fontWeight: '$medium',\n});\n\nexport const TextAreaInput = styled(ResizeTextarea, {\n  width: '$full',\n  p: '$2',\n  fontSize: '$md',\n  outline: 'none',\n  bg: '$black',\n  color: '$white',\n  border: '1px solid',\n  borderColor: '$grey-600',\n\n  '&:hover': {\n    borderColor: '$pink-600',\n  },\n\n  '&:focus': {\n    borderColor: '$teal-500',\n  },\n\n  '&:disabled': {\n    bg: '$grey-400',\n    cursor: 'not-allowed',\n  },\n\n  variants: {\n    error: {\n      true: {\n        bg: '$red-500',\n      },\n    },\n  },\n});\n\nexport const Message = styled('small', {\n  mt: '$1',\n  color: '$grey-400',\n  d: 'block',\n});\n\nexport const Error = styled('div', {\n  color: '$red-500',\n});\n"],
  "mappings": ";;;;;AAAA;;;ACEA;AAEA;AAAA;AAAA;AAEO,IAAM,UAAU,OAAO,OAAO;AAAA,EACnC,OAAO;AAAA;AAGF,IAAM,QAAQ,OAAiB,MAAM;AAAA,EAC1C,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,eAAe;AAAA,EACf,YAAY;AAAA;AAGP,IAAM,gBAAgB,OAAO,gBAAgB;AAAA,EAClD,OAAO;AAAA,EACP,GAAG;AAAA,EACH,UAAU;AAAA,EACV,SAAS;AAAA,EACT,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,aAAa;AAAA,EAEb,WAAW;AAAA,IACT,aAAa;AAAA;AAAA,EAGf,WAAW;AAAA,IACT,aAAa;AAAA;AAAA,EAGf,cAAc;AAAA,IACZ,IAAI;AAAA,IACJ,QAAQ;AAAA;AAAA,EAGV,UAAU;AAAA,IACR,OAAO;AAAA,MACL,MAAM;AAAA,QACJ,IAAI;AAAA;AAAA;AAAA;AAAA;AAML,IAAM,UAAU,OAAO,SAAS;AAAA,EACrC,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,GAAG;AAAA;AAGE,IAAM,QAAQ,OAAO,OAAO;AAAA,EACjC,OAAO;AAAA;;;AD7BF,IAAM,WAAW,MAAM,WAC5B,CAAC,EAAE,OAAO,MAAM,MAAM,OAAO,UAAU,GAAG,OAAO,QAAQ;AACvD,SACE,oCAAC,SAAD,MACG,SAAS,oCAAC,OAAD;AAAA,IAAO,SAAS,YAAY;AAAA,KAAS,QAE/C,oCAAC,eAAD;AAAA,IACE;AAAA,IACA,IAAI,YAAY;AAAA,IAChB;AAAA,IACA;AAAA,MAGF,oCAAC,SAAD,MAAU,OAEV,oCAAC,OAAD,MAAQ;AAAA;AAMhB,SAAS,cAAc;",
  "names": []
}
