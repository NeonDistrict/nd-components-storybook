{
  "version": 3,
  "sources": ["../src/components/pagination/index.tsx", "../src/components/pagination/styles.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport React, { HTMLAttributes, useMemo } from 'react';\n\nimport { CSS } from '../../system';\n\nimport { useMediaQuery } from '../../hooks';\n\nimport {\n  HiOutlineArrowSmLeft as LeftMobileIcon,\n  HiOutlineArrowSmRight as RightMobileIcon,\n  HiOutlineChevronDoubleLeft as DoubleLeftIcon,\n  HiOutlineChevronDoubleRight as DoubleRightIcon,\n  HiOutlineChevronLeft as LeftIcon,\n  HiOutlineChevronRight as RightIcon,\n} from 'react-icons/hi';\n\nimport * as S from './styles';\n\nexport type PaginationProps = {\n  /**\n   * The total number of pages.\n   */\n  totalCount: number;\n  /**\n   * The size of the pagination.\n   */\n  pageSize: number;\n  /**\n   * The current page.\n   */\n  currentPage: number;\n  /**\n   * The React state hook to update the current page.\n   */\n  setCurrentPage: (page: number) => void;\n  /**\n   * A boolean to indicate if we can go to the previous page.\n   */\n  canPrevious: boolean;\n  /**\n   * A boolean to indicate if we can go to the next page.\n   */\n  canNext: boolean;\n  /**\n   *  Number of pages that will show in the component.\n   *  @default 5\n   */\n  limit?: number;\n  /**\n   * A boolean to indicate if the component should have the go to first/go to last buttons.\n   */\n  quickJumpButton?: boolean;\n  /**\n   * CSS properties\n   */\n  css?: CSS;\n} & HTMLAttributes<HTMLDivElement>;\n\ntype MobilePagination = Pick<\n  PaginationProps,\n  'currentPage' | 'totalCount' | 'canPrevious' | 'canNext' | 'css'\n> & { goPrevious: () => void; goNext: () => void };\nconst MobilePagination = ({\n  currentPage,\n  totalCount,\n  canPrevious,\n  canNext,\n  goPrevious,\n  goNext,\n}: MobilePagination) => {\n  return (\n    <S.MobileContainer>\n      <S.ArrowLeft canGo={canPrevious} onClick={goPrevious}>\n        <LeftMobileIcon size={24} />\n      </S.ArrowLeft>\n      {currentPage} of {totalCount}\n      <S.ArrowRight canGo={canNext} onClick={goNext}>\n        <RightMobileIcon size={24} />\n      </S.ArrowRight>\n    </S.MobileContainer>\n  );\n};\n\ntype DesktopPagination = Pick<\n  PaginationProps,\n  | 'currentPage'\n  | 'pageSize'\n  | 'totalCount'\n  | 'setCurrentPage'\n  | 'limit'\n  | 'quickJumpButton'\n  | 'css'\n> & {\n  goPrevious: () => void;\n  goNext: () => void;\n  canPrevious: boolean;\n  canNext: boolean;\n};\n\nconst DesktopPagination = ({\n  limit,\n  currentPage,\n  setCurrentPage,\n  pageSize,\n  totalCount,\n  canPrevious,\n  canNext,\n  goNext,\n  goPrevious,\n  quickJumpButton,\n}: DesktopPagination) => {\n  const generatePages = (currentPage: number, limit: number) => {\n    const start = Math.floor((currentPage - 1) / limit) * limit;\n    return new Array(limit).fill(0).map((_, idx) => start + idx + 1);\n  };\n\n  const pages = useMemo(\n    () => generatePages(currentPage, limit!),\n    [currentPage, limit],\n  );\n  const totalPages = Math.ceil(totalCount / pageSize);\n\n  return (\n    <S.PaginationContainer>\n      <S.IconContainer>\n        {quickJumpButton && (\n          <S.FirstPageArrow\n            canGo={canPrevious}\n            onClick={() => setCurrentPage(1)}\n          >\n            <DoubleLeftIcon />\n          </S.FirstPageArrow>\n        )}\n        <S.ArrowLeft canGo={canPrevious} onClick={goPrevious}>\n          <LeftIcon />\n        </S.ArrowLeft>\n      </S.IconContainer>\n      {pages.map((page, index) =>\n        page <= totalPages && index <= limit! - 1 ? (\n          <S.NumberContainer active={currentPage === page}>\n            <S.Number key={index} onClick={() => setCurrentPage(page)}>\n              {page}\n            </S.Number>\n          </S.NumberContainer>\n        ) : null,\n      )}\n      <S.IconContainer>\n        <S.ArrowRight canGo={canNext} onClick={goNext}>\n          <RightIcon />\n        </S.ArrowRight>\n\n        {quickJumpButton && (\n          <S.LastPageArrow\n            canGo={canNext}\n            onClick={() => setCurrentPage(totalPages)}\n          >\n            <DoubleRightIcon />\n          </S.LastPageArrow>\n        )}\n      </S.IconContainer>\n    </S.PaginationContainer>\n  );\n};\n\n/**\n * Pagination component\n *\n * @description enables the user to select a specific page from a range of pages.\n */\nexport const Pagination = ({\n  quickJumpButton = false,\n  currentPage,\n  setCurrentPage,\n  limit = 5,\n  ...props\n}: PaginationProps) => {\n  const goNext = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  const goPrevious = () => {\n    setCurrentPage(currentPage - 1);\n  };\n\n  const isMobile = useMediaQuery('(max-width: 600px)');\n\n  return isMobile ? (\n    <MobilePagination\n      currentPage={currentPage}\n      goNext={goNext}\n      goPrevious={goPrevious}\n      {...props}\n    />\n  ) : (\n    <DesktopPagination\n      goNext={goNext}\n      goPrevious={goPrevious}\n      currentPage={currentPage}\n      setCurrentPage={setCurrentPage}\n      limit={limit}\n      quickJumpButton={quickJumpButton}\n      {...props}\n    />\n  );\n};\n", "import { styled } from '../../system';\n\nexport const PaginationContainer = styled('div', {\n  d: 'flex',\n  p: '$4 $6',\n  justify: 'center',\n  align: 'center',\n  gap: '$2',\n  border: '1px dashed $pink-500',\n  br: '$sm',\n});\n\nexport const NumberContainer = styled('div', {\n  d: 'flex',\n  p: '$2 $4',\n  color: '$white',\n\n  '&:hover': {\n    color: '$pink-600',\n    cursor: 'pointer',\n  },\n\n  /**\n   * Variants\n   */\n  variants: {\n    /**\n     * Active variant\n     */\n    active: {\n      true: {\n        color: '$pink-500',\n      },\n    },\n  },\n});\n\nexport const Number = styled('div', {\n  fontSize: '$sm',\n  fontWeight: '$medium',\n});\n\nexport const MobileContainer = styled('div', {\n  d: 'flex',\n  align: 'center',\n  justify: 'center',\n  color: '$white',\n  gap: '$4',\n});\n\nconst iconVariant = {\n  svg: {\n    color: '$grey-700',\n    cursor: 'default',\n  },\n  /**\n   * Variants\n   */\n  variants: {\n    /**\n     * canGo variant\n     */\n    canGo: {\n      true: {\n        svg: {\n          color: '$pink-500',\n          cursor: 'pointer',\n        },\n      },\n    },\n  },\n};\n\nexport const IconContainer = styled('div', {\n  d: 'flex',\n  align: 'center',\n});\n\nconst iconStyle = {\n  d: 'flex',\n  align: 'center',\n  justify: 'center',\n  svg: {\n    fontSize: '$kg',\n    color: '$pink-500',\n    cursor: 'pointer',\n  },\n};\n\nconst resetButton = {\n  bg: 'transparent',\n  border: 'none',\n  outline: 'none',\n  cursor: 'pointer',\n};\n\nexport const ArrowLeft = styled('button', {\n  ...resetButton,\n  ...iconStyle,\n  ...iconVariant,\n});\n\nexport const ArrowRight = styled('button', {\n  ...resetButton,\n  ...iconStyle,\n  ...iconVariant,\n});\n\nexport const FirstPageArrow = styled('button', {\n  ...resetButton,\n  ...iconStyle,\n  ...iconVariant,\n});\n\nexport const LastPageArrow = styled('button', {\n  ...resetButton,\n  ...iconStyle,\n  ...iconVariant,\n});\n"],
  "mappings": "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",
  "names": []
}
