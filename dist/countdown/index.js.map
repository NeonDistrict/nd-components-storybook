{
  "version": 3,
  "sources": ["../../src/components/countdown/index.tsx", "../../src/components/countdown/useCountdown.ts", "../../src/components/countdown/styles.ts"],
  "sourcesContent": ["import React, { HTMLAttributes } from 'react';\n\nimport { VariantProps, CSS } from '../../system';\n\nimport { useCountdown } from './useCountdown';\n\nimport * as S from './styles';\n\nexport type CountdownProps = {\n  /**\n   * Countdown size\n   *\n   * @default 'md'\n   */\n  size?: VariantProps<typeof S.Wrapper>['size'];\n  /**\n   * time in unix timestamp\n   *\n   * @example 1637680036\n   */\n  endDate: number;\n  /**\n   * CSS properties\n   */\n  css?: CSS;\n  /**\n   * The time in milliseconds to count down from.\n   *\n   * @example HH:mm:ss\n   */\n  onFinish: () => void;\n} & HTMLAttributes<HTMLDivElement>;\n\nexport const Countdown = ({ endDate, onFinish, ...props }: CountdownProps) => {\n  const countdown = useCountdown(endDate);\n\n  // emit event when countdown is finished\n  if (countdown.unixTimestamp <= 1) {\n    !!onFinish && onFinish();\n  }\n\n  return (\n    <S.Wrapper\n      role=\"timer\"\n      aria-atomic=\"true\"\n      {...props}\n    >{`${countdown.hours}:${countdown.minutes}:${countdown.seconds}`}</S.Wrapper>\n  );\n};\n", "import { useEffect, useState } from 'react';\n\nexport const _SECOND = 1000;\nexport const _MINUTE = _SECOND * 60;\nexport const _HOUR = _MINUTE * 60;\nexport const _DAY = _HOUR * 24;\n\n// add 0 before days, hours, minutes and seconds\nconst padStart = (value: number) => {\n  return String(value).padStart(2, '0');\n};\n\n/**\n * Countdown custom hook\n *\n * @description This hook is used to manage the countdown\n */\nexport const useCountdown = (endDate: number) => {\n  const [days, setDays] = useState(99);\n  const [hours, setHours] = useState(99);\n  const [minutes, setMinutes] = useState(99);\n  const [seconds, setSeconds] = useState(99);\n  const [unixTimestamp, setUnixTimestamp] = useState(99);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // prevent negative values\n      if (unixTimestamp <= 1) return clearInterval(interval);\n\n      // get current date\n      const now = new Date().getTime();\n      // get difference between current date and end date\n      const diff = endDate - now;\n\n      const DAYS = Math.floor(diff / _DAY);\n      const HOURS = Math.floor((diff % _DAY) / _HOUR);\n      const MINUTES = Math.floor((diff % _HOUR) / _MINUTE);\n      const SECONDS = Math.floor((diff % _MINUTE) / _SECOND);\n      const UNIXTIMESTAMP = diff / 1000;\n\n      setDays(DAYS);\n      setHours(HOURS);\n      setMinutes(MINUTES);\n      setSeconds(SECONDS);\n      setUnixTimestamp(UNIXTIMESTAMP);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [endDate, unixTimestamp]);\n\n  return {\n    days: padStart(days),\n    hours: padStart(hours),\n    minutes: padStart(minutes),\n    seconds: padStart(seconds),\n    daysAsNumber: days,\n    hoursAsNumber: hours,\n    minutesAsNumber: minutes,\n    secondsAsNumber: seconds,\n    unixTimestamp,\n  };\n};\n", "import { styled } from '../../system';\n\nexport const Wrapper = styled('div', {\n  d: 'inline-block',\n  color: '$pink-500',\n  fontWeight: 400,\n  fontFamily: '\"Syne Mono\", serif',\n  borderTop: '1px solid $grey-600',\n  borderBottom: '1px solid $grey-600',\n  textShadow: '0px 0px 4px rgba(245, 113, 171, 0.52)',\n\n  /**\n   * Variants\n   */\n  variants: {\n    /**\n     * Size variant\n     */\n    size: {\n      sm: {\n        fontSize: '20px',\n      },\n      md: {\n        fontSize: '50px',\n        py: '$1',\n      },\n    },\n  },\n\n  /**\n   * Default variants\n   */\n  defaultVariants: {\n    size: 'md',\n  },\n});\n"],
  "mappings": ";;;;;;;AAAA;;;ACAA;AAEO,IAAM,UAAU;AAChB,IAAM,UAAU,UAAU;AAC1B,IAAM,QAAQ,UAAU;AACxB,IAAM,OAAO,QAAQ;AAG5B,IAAM,WAAW,CAAC,UAAkB;AAClC,SAAO,OAAO,OAAO,SAAS,GAAG;AAAA;AAQ5B,IAAM,eAAe,CAAC,YAAoB;AAC/C,QAAM,CAAC,MAAM,WAAW,SAAS;AACjC,QAAM,CAAC,OAAO,YAAY,SAAS;AACnC,QAAM,CAAC,SAAS,cAAc,SAAS;AACvC,QAAM,CAAC,SAAS,cAAc,SAAS;AACvC,QAAM,CAAC,eAAe,oBAAoB,SAAS;AAEnD,YAAU,MAAM;AACd,UAAM,WAAW,YAAY,MAAM;AAEjC,UAAI,iBAAiB;AAAG,eAAO,cAAc;AAG7C,YAAM,MAAM,IAAI,OAAO;AAEvB,YAAM,OAAO,UAAU;AAEvB,YAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,YAAM,QAAQ,KAAK,MAAO,OAAO,OAAQ;AACzC,YAAM,UAAU,KAAK,MAAO,OAAO,QAAS;AAC5C,YAAM,UAAU,KAAK,MAAO,OAAO,UAAW;AAC9C,YAAM,gBAAgB,OAAO;AAE7B,cAAQ;AACR,eAAS;AACT,iBAAW;AACX,iBAAW;AACX,uBAAiB;AAAA,OAChB;AAEH,WAAO,MAAM,cAAc;AAAA,KAC1B,CAAC,SAAS;AAEb,SAAO;AAAA,IACL,MAAM,SAAS;AAAA,IACf,OAAO,SAAS;AAAA,IAChB,SAAS,SAAS;AAAA,IAClB,SAAS,SAAS;AAAA,IAClB,cAAc;AAAA,IACd,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB;AAAA;AAAA;;;ACzDG,IAAM,UAAU,OAAO,OAAO;AAAA,EACnC,GAAG;AAAA,EACH,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,cAAc;AAAA,EACd,YAAY;AAAA,EAKZ,UAAU;AAAA,IAIR,MAAM;AAAA,MACJ,IAAI;AAAA,QACF,UAAU;AAAA;AAAA,MAEZ,IAAI;AAAA,QACF,UAAU;AAAA,QACV,IAAI;AAAA;AAAA;AAAA;AAAA,EAQV,iBAAiB;AAAA,IACf,MAAM;AAAA;AAAA;;;AFAH,IAAM,YAAY,CAAC,OAAoD;AAApD,eAAE,WAAS,aAAX,IAAwB,kBAAxB,IAAwB,CAAtB,WAAS;AACnC,QAAM,YAAY,aAAa;AAG/B,MAAI,UAAU,iBAAiB,GAAG;AAChC,KAAC,CAAC,YAAY;AAAA;AAGhB,SACE,oCAAG,SAAH;AAAA,IACE,MAAK;AAAA,IACL,eAAY;AAAA,KACR,QACJ,GAAG,UAAU,SAAS,UAAU,WAAW,UAAU;AAAA;",
  "names": []
}
