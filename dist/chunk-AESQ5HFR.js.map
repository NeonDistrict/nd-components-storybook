{
  "version": 3,
  "sources": ["../src/hooks/src/useMediaQuery.ts", "../src/hooks/src/useBreakpoint.ts", "../src/hooks/src/useId.ts"],
  "sourcesContent": ["import { useState, useEffect } from 'react';\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport const useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => setMatches(media.matches);\n    window.addEventListener('resize', listener);\n    return () => window.removeEventListener('resize', listener);\n  }, [matches, query]);\n\n  return matches;\n};\n", "import { useMemo } from 'react';\n\nimport { useMediaQuery } from '..';\n\ntype useBreakpointProps = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'\n */\nexport const useBreakpoint = (query: useBreakpointProps = 'md') => {\n  const breakpoints = useMemo(\n    () => ({\n      xs: '(max-width: 575px)',\n      sm: '(min-width: 576px)',\n      md: '(min-width: 768px)',\n      lg: '(min-width: 992px)',\n      xl: '(min-width: 1200px)',\n      '2xl': '(min-width: 1400px)',\n    }),\n    [],\n  );\n\n  return useMediaQuery(breakpoints[query]);\n};\n", "// This implementation is heavily inspired by react-aria's implementation\n\nimport * as React from 'react';\n\ntype IdContextValue = {\n  prefix: number;\n  current: number;\n};\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n};\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext);\n\nexport const IdProvider: React.FC = React.memo(({ children }) => {\n  const currentContext = React.useContext(IdContext);\n  const isRoot = currentContext === defaultIdContext;\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRoot ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRoot, currentContext],\n  );\n\n  return React.createElement(IdContext.Provider, { value: context }, children);\n});\n\nIdProvider.displayName = 'IdProvider';\n\nexport function useId(prefix?: string): string {\n  const context = React.useContext(IdContext);\n  return React.useMemo(\n    () => [prefix, context.prefix, ++context.current].filter(Boolean).join('-'),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [prefix],\n  );\n}\n"],
  "mappings": ";AAAA;AAOO,IAAM,gBAAgB,CAAC,UAAkB;AAC9C,QAAM,CAAC,SAAS,cAAc,SAAS;AAEvC,YAAU,MAAM;AACd,UAAM,QAAQ,OAAO,WAAW;AAChC,QAAI,MAAM,YAAY,SAAS;AAC7B,iBAAW,MAAM;AAAA;AAEnB,UAAM,WAAW,MAAM,WAAW,MAAM;AACxC,WAAO,iBAAiB,UAAU;AAClC,WAAO,MAAM,OAAO,oBAAoB,UAAU;AAAA,KACjD,CAAC,SAAS;AAEb,SAAO;AAAA;;;ACpBT;;;ACEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAM,mBAAmC;AAAA,EACvC,QAAQ,KAAK,MAAM,KAAK,WAAW;AAAA,EACnC,SAAS;AAAA;AAGX,IAAM,YAAY,AAAM,cAA8B;AAE/C,IAAM,aAAuB,AAAM,KAAK,CAAC,EAAE,eAAe;AAC/D,QAAM,iBAAiB,AAAM,WAAW;AACxC,QAAM,SAAS,mBAAmB;AAClC,QAAM,UAA0B,AAAM,SACpC,MAAO;AAAA,IACL,QAAQ,SAAS,IAAI,EAAE,eAAe;AAAA,IACtC,SAAS;AAAA,MAEX,CAAC,QAAQ;AAGX,SAAO,AAAM,cAAc,UAAU,UAAU,EAAE,OAAO,WAAW;AAAA;AAGrE,WAAW,cAAc;",
  "names": []
}
