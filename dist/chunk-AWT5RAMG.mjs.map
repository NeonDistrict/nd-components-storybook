{
  "version": 3,
  "sources": ["../src/components/image/index.tsx", "../src/components/image/styles.tsx"],
  "sourcesContent": ["import React, { forwardRef, ImgHTMLAttributes } from 'react';\n\nimport { CSS, VariantProps } from '../../system';\n\nimport * as S from './styles';\n\nexport type ImageProps = {\n  /**\n   * Src of the image\n   */\n  src: string;\n  /**\n   * Alt text of the image\n   *\n   */\n  alt: string;\n  /**\n   * if `true`, add objectFit \"cover\" to image\n   *\n   * @default \"true\"\n   */\n  objectFit?: VariantProps<typeof S.Image>['objectFit'];\n  /**\n   * if `true`, add backgroundSize \"cover\" to image\n   *\n   * @default \"true\"\n   */\n  cover?: VariantProps<typeof S.Image>['cover'];\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note \uD83D\uDEA8: We recommend you use a local image\n   *\n   */\n  fallbackSrc?: string;\n  /**\n   * CSS properties\n   */\n  css?: CSS;\n} & ImgHTMLAttributes<HTMLImageElement>;\n\n/**\n * Image component\n *\n * @description used to display images.\n */\nexport const Image = forwardRef<HTMLImageElement, ImageProps>(\n  ({ fallbackSrc, ...props }, ref) => {\n    // if image is loading or fails, show fallback image\n    const onError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\n      e.currentTarget.onerror = null;\n      e.currentTarget.src = fallbackSrc || '';\n    };\n\n    return <S.Image ref={ref} loading=\"lazy\" onError={onError} {...props} />;\n  },\n);\n\nImage.displayName = 'Image';\n", "import { styled } from '../../system';\n\nexport const Image = styled('img', {\n  size: '$full',\n\n  /**\n   * Variants\n   */\n  variants: {\n    /**\n     * Object fit variant\n     */\n    objectFit: {\n      true: {\n        objectFit: 'cover',\n      },\n      false: {\n        objectFit: 'contain',\n      },\n    },\n    /**\n     * Cover variant\n     */\n    cover: {\n      true: {\n        backgroundSize: 'cover',\n      },\n      false: {\n        backgroundSize: 'contain',\n      },\n    },\n  },\n\n  /**\n   * Default variants\n   */\n  defaultVariants: {\n    objectFit: 'true',\n    cover: 'true',\n  },\n});\n"],
  "mappings": ";;;;;;;AAAA;;;ACEO,IAAM,QAAQ,OAAO,OAAO;AAAA,EACjC,MAAM;AAAA,EAKN,UAAU;AAAA,IAIR,WAAW;AAAA,MACT,MAAM;AAAA,QACJ,WAAW;AAAA;AAAA,MAEb,OAAO;AAAA,QACL,WAAW;AAAA;AAAA;AAAA,IAMf,OAAO;AAAA,MACL,MAAM;AAAA,QACJ,gBAAgB;AAAA;AAAA,MAElB,OAAO;AAAA,QACL,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAQtB,iBAAiB;AAAA,IACf,WAAW;AAAA,IACX,OAAO;AAAA;AAAA;;;ADQJ,IAAM,SAAQ,WACnB,CAAC,IAA2B,QAAQ;AAAnC,eAAE,kBAAF,IAAkB,kBAAlB,IAAkB,CAAhB;AAED,QAAM,UAAU,CAAC,MAAqD;AACpE,MAAE,cAAc,UAAU;AAC1B,MAAE,cAAc,MAAM,eAAe;AAAA;AAGvC,SAAO,oCAAG,OAAH;AAAA,IAAS;AAAA,IAAU,SAAQ;AAAA,IAAO;AAAA,KAAsB;AAAA;AAInE,OAAM,cAAc;",
  "names": []
}
